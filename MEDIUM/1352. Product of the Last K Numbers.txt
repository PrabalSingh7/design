1352. Product of the Last K Numbers
Medium
1.2K
60
Companies
Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.

Implement the ProductOfNumbers class:

ProductOfNumbers() Initializes the object with an empty stream.
void add(int num) Appends the integer num to the stream.
int getProduct(int k) Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers.
The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.

 

Example:

Input
["ProductOfNumbers","add","add","add","add","add","getProduct","getProduct","getProduct","add","getProduct"]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

Output
[null,null,null,null,null,null,20,40,0,null,32]

Explanation
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers.add(3);        // [3]
productOfNumbers.add(0);        // [3,0]
productOfNumbers.add(2);        // [3,0,2]
productOfNumbers.add(5);        // [3,0,2,5]
productOfNumbers.add(4);        // [3,0,2,5,4]
productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8);        // [3,0,2,5,4,8]
productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 
 

Constraints:

0 <= num <= 100
1 <= k <= 4 * 104
At most 4 * 104 calls will be made to add and getProduct.
The product of the stream at any point in time will fit in a 32-bit integer.
Accepted
68.2K
Submissions
136.3K
Acceptance Rate
50.0%


class ProductOfNumbers {
    vector<int> vec;
    vector<int> prefix;
    int lz= -1;

public:
    ProductOfNumbers() {
        vec.clear();
        prefix.clear();
    }
    
    void add(int num) {
        vec.push_back(num);
        //updating the most recent occurence of zero, to work with prefix product vector
        if(num==0)  
            lz=vec.size()-1;    

        //preparing prefix product vector (index by index)
        if(num!=0 && prefix.size()>0)  {
            int prev = prefix[prefix.size()-1];
            if(prev!=0) {
                int curr = num * prev;
                prefix.push_back(curr);
            }
            //if prev = 0, means last value was 0, so now evaluating from fresh currrent value 
            else 
                prefix.push_back(num);
        }
        //if num = 0  : then prefix product = 0 for current index.
        else 
            prefix.push_back(num);
    
    }
    
    int getProduct(int k) {
        //evaluating the nominator & its index from prefix produxt array for k-product evaluation
        int end = prefix.size();
        int nom = prefix[end-1];

        //evaluating the denominator & its index from prefix produxt array for k-product evaluation
        int start = (end -1) - k;
        int dom;

        if(start==-1 || prefix[start]==0)   {
            dom = 1;
        }
        else {
            dom = prefix[start];
        }

        //checking if the last occurence of a 0, was before the k elements
        if(lz>start)   
            return 0;

        return nom/dom;
    }
};

/**
 * Your ProductOfNumbers object will be instantiated and called as such:
 * ProductOfNumbers* obj = new ProductOfNumbers();
 * obj->add(num);
 * int param_2 = obj->getProduct(k);
 */