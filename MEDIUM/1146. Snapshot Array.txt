1146. Snapshot Array
Medium
2.8K
367
Implement a SnapshotArray that supports the following interface:

SnapshotArray(int length) initializes an array-like data structure with the given length. Initially, each element equals 0.
void set(index, val) sets the element at the given index to be equal to val.
int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
 

Example 1:

Input: ["SnapshotArray","set","snap","set","get"]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5
 

Constraints:

1 <= length <= 5 * 104
0 <= index < length
0 <= val <= 109
0 <= snap_id < (the total number of times we call snap())
At most 5 * 104 calls will be made to set, snap, and get.
166.9K
447.7K
37.3%






âœ”ðŸ’¥âœ¨ C++ || DESIGN || Hashmap & Binary Search || commeneted coede
thursday07
100 Days Badge 2022
23
0
a few seconds ago
C++
Hash Table
Binary Search
Intuition
DESIGN IMPLEMENTATION with MAPPING + BINARY SEARCH IN HASHMAP

Approach
Binary Search in HashMap of type (int,vector<pair<int,int>>).
int -> index
vector<pair<int,int>> -> snapScore , value at that time

download (2).jfif

Complexity
Time complexity :
Snapshot() => O(N)
set() => O(1)
snap() => O(1)
get() => O(logK)
Space complexity:
worst => O(N*K*M)
Code
class SnapshotArray {
    unordered_map<int,vector<pair<int,int>>> mp;
    int ss = 0;
public:
    SnapshotArray(int length) {
        // clearing snapShotArray && reinitializing ss with 0
        mp.clear();
        ss = 0;
        for(int i=0; i<length; i++)    {
            mp[i].push_back({ss,0});
        }
    }
    
    void set(int index, int val) {
        int l=0, h=mp[index].size()-1;
        int end_val_ss = mp[index][h].first;

        //updating the last pair if snapshot is not taken yet 
        if(end_val_ss == ss)    {
            mp[index][h].second = val;
        }
        //otherwise simply updating 
        else {
            mp[index].push_back({ss,val});
        }
    }
    
    int snap() {
        // incremneting snap_id with 1
        ss += 1;
        return ss-1;
    }
    
    int get(int index, int snap_id) {
        int l=0, h=mp[index].size()-1;
        
        //binary search on the given index 
        while(l<=h)  {
            int mid = l + (h-l)/2;
            int mv = mp[index][mid].first;

            if(mv < snap_id)   {
                l = mid + 1;
            }
            else if(mv > snap_id)   {
                h = mid - 1;
            }
            else if(mv == snap_id)   {
                //returning if found with same snapscore
                return mp[index][mid].second;
            }
        }

        //returning the latest value pair for following index
        return mp[index][h].second;
    }
};



/**
 * Your SnapshotArray object will be instantiated and called as such:
 * SnapshotArray* obj = new SnapshotArray(length);
 * obj->set(index,val);
 * int param_2 = obj->snap();
 * int param_3 = obj->get(index,snap_id);
 */
download (1).jfif